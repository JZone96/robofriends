{"version":3,"sources":["components/SearchBox.js","logo.svg","components/Card.js","components/CardList.js","containers/App.js","reportWebVitals.js","index.js"],"names":["SearchBox","searchChange","type","placeholder","onChange","Card","username","email","id","src","CardList","robots","map","user","i","App","onSearchChange","letters","setState","searchfield","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","className","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAUeA,GCVA,I,WDEG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACE,uBAAOC,KAAK,SACZC,YAAY,gBACZC,SAAYH,MEUAI,EAbF,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,GAC/B,OACC,gCACC,qBAAKC,IAAG,+BAA2BD,EAA3B,mBACR,gCACC,6BAAKF,IACL,6BAAKC,WCaMG,EAlBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OACC,8BAEEA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OACC,cAAC,EAAD,CAECN,GAAMG,EAAOG,GAAGN,GAChBF,SAAYK,EAAOG,GAAGR,SACtBC,MAASI,EAAOG,GAAGP,OAHZI,EAAOG,GAAGN,UCkCTO,E,kDArCb,aAAc,IAAD,8BACX,gBAcFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEC,YAAcF,EAAQG,OAAOC,SAd7C,EAAKC,MAAQ,CACXH,YAAa,GACbR,OAAQ,IAJC,E,gEASO,IAAD,OACjBY,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAS,EAAKT,SAAS,CAACP,OAASgB,S,+BAShC,IAAD,OAEAC,EAAiBC,KAAKP,MAAMX,OAAOmB,QAAQ,SAAAC,GAC/C,OAAOA,EAAMzB,SAAS0B,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,kBAEtE,OACE,sBAAKE,UAAU,KAAf,UACE,6CACA,cAAC,EAAD,CAAWjC,aAAgB4B,KAAKb,iBAChC,cAAC,EAAD,CAAUL,OAAUiB,W,GA/BVO,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9584491c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = ({searchChange }) =>{\r\n\treturn (\r\n\t\t\t<input type='search' \r\n\t\t\tplaceholder='search robots'\r\n\t\t\tonChange = {searchChange}/>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\n\r\n//creates a card\r\nconst Card = ({username, email, id}) =>{//takes PROPS, in this case they are username, email, id\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<img src ={`https://robohash.org/${id}?size=200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{username}</h2>\r\n\t\t\t\t<h2>{email}</h2>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js'\r\n\r\n//creates an array of cards\r\nconst CardList = ({robots}) => {//PROPS in this case is ROBOTS, that points to filteredRobot Function\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user,i)=>{\r\n\t\t\t\t\treturn(\r\n\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\tkey = {robots[i].id}//every single component must have a key\r\n\t\t\t\t\t\t\tid = {robots[i].id}\r\n\t\t\t\t\t\t\tusername = {robots[i].username}\r\n\t\t\t\t\t\t\temail = {robots[i].email}\r\n\t\t\t\t\t\t\t/>);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default CardList;","import React, {Component} from 'react';\nimport logo from '../logo.svg';\nimport '../App.css';\nimport 'tachyons';\nimport SearchBox from '../components/SearchBox.js'\nimport CardList from '../components/CardList.js'\n\nclass App extends Component{\n  constructor(){ //what we need to change\n    super()\n    this.state = {\n      searchfield: '',\n      robots: []\n    }\n  }\n\n  //where are we taking our resources from when COMPONENTMOUNTS\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())//fetch always return a response,  wich has something inside, in this case users\n    .then(users =>{this.setState({robots : users})});\n  }\n\n  onSearchChange = (letters) =>{\n    this.setState({ searchfield : letters.target.value})//every time we write a letter(s) in the searchfield, it's state is setted\n  }\n\n\n\n  render(){\n\n    const filteredRobots = this.state.robots.filter (robot =>{\n      return robot.username.toLowerCase().includes(this.state.searchfield.toLowerCase());\n    })\n    return (\n      <div className='tc'>\n        <h1>robofriends</h1>\n        <SearchBox searchChange = {this.onSearchChange}/>\n        <CardList robots = {filteredRobots}/>\n      </div>\n      );\n\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}